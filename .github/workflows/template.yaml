name: Terraform Deployment with Snyk

on:
  push:
    branches:
      - none  # Trigger on push to main branch
  workflow_dispatch:
    inputs:
      resourcetype:
        description: 'resourcetype to deploy (e.g., VM, Webapp)'
        required: true

jobs:
  terraform-security-analysis:
    runs-on: ubuntu-latest

    env:
      TF_WORKING_DIR: ${{ github.workspace }}/${{ github.event.inputs.resourcetype }}  # Correct working directory
      TF_VERSION: '1.3.5'  # Specify the Terraform version

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: List the contents of the working directory (for debugging)
    - name: List contents of the working directory
      run: |
        echo "Listing the contents of the working directory..."
        ls -al ${{ env.TF_WORKING_DIR }}

    # Step 3: Install Terraform
    - name: Install Terraform ${{ env.TF_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Step 4: Check if directory and Terraform files exist
    - name: Check if directory exists and contains Terraform files
      run: |
        if [ ! -d "${{ env.TF_WORKING_DIR }}" ]; then
          echo "Directory ${TF_WORKING_DIR} does not exist!";
          exit 1;
        fi
        if [ ! -f "${{ env.TF_WORKING_DIR }}/main.tf" ]; then
          echo "No Terraform configuration found in ${TF_WORKING_DIR}. Ensure a main.tf file exists.";
          exit 1;
        fi

    # Step 5: Initialize Terraform
    - name: Terraform Init
      run: |
        echo "Initializing Terraform..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} init -upgrade

    # Step 6: Install Snyk CLI and run security analysis on Terraform code
    - name: Run Snyk on Terraform code
      run: |
        echo "Running Snyk for security analysis on Terraform configuration..."
        npm install -g snyk  # Install Snyk CLI globally
        snyk test --terraform ${{ env.TF_WORKING_DIR }} | tee ${{ github.workspace }}/snyk_output.txt  # Run Snyk test and save output to a .txt file

    # Step 7: Commit the Snyk output to the repository (if updated)
    - name: Commit Snyk Output
      run: |
        git config --global user.name "sivalakshmimettu"
        git config --global user.email "sivalakshmimettu@github.com"

        # Add the snyk_output.txt to the staging area
        git add ${{ github.workspace }}/snyk_output.txt

        # Commit only if the file has changed
        git diff --quiet || git commit -m "Add/Update Snyk output for Terraform security analysis"

        # Show the status to verify what's staged
        git status

        # Show the last commit log
        git log -n 1

    # Step 8: Push the commit using GitHub token for authentication
    - name: Push Snyk Output Commit
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GIT_PAT }}@github.com/${{ github.repository }}.git
        git push || echo "Push failed, skipping..."

    # Step 9: Validate Terraform configuration
    - name: Terraform Validate
      run: |
        echo "Validating Terraform configuration..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} validate
